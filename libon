#!/usr/bin/env bash
. bpm
bpm::include is
bpm::include log
bpm::include string


# Run a command when the currently executing script or subshell ends. This
# overwrites the `EXIT` trap, but tries to do this in a polite way. If the
# trap is already assigned another command, that command is added to the list
# of commands to run at the end. Subsequent calls to `on::exit` will keep
# adding to this array.
#
# $1   - The command to execute.
# $2-@ - Optional arguments to pass to the command.
#
# Examples
#
#    # Download a file
#    curl -O http://example.com/installer.tar.gz
#
#    # When done, automatically clean it up.
#    on::exit rm -f /tmp/installer.tar.gz
#
#    # This triggers at the end of subshells as well.
#    touch file1
#    on::exit rm file1
#    (
#        touch file2
#        on::exit rm file2
#    )
#    ls file1 file2    # Only shows file1
#
# Returns nothing.
on::exit() {
    local cmd currentTrap length name

    name="ON_EXIT_$BASHPID"

    if ! is::array "$name"; then
        #: This set of assignments preserves any previous EXIT trap.
        currentTrap=$(trap -p EXIT)
        currentTrap=${currentTrap#trap -- }
        currentTrap=${currentTrap% EXIT}

        if [[ "$currentTrap" == "'on::exitTrap'" ]]; then
            currentTrap=""
        fi

        eval "$name=($currentTrap)"
    fi

    # Note:  I am not a fan of eval.  If you have a better way to do this that
    # uses fewer evaluated statements that also works from Bash 3 through the
    # latest release and with "set -eu", then I'd LOVE to know.
    eval "length=\${#""$name""[@]}"
    string::escape cmd "$@" || return $?
    log::debug "Adding on::exit item [$BASHPID $length]: ${cmd}" || return $?
    eval "$name[$length]=\$cmd"

    # Always set or reset the trap.
    trap on::exitTrap EXIT
}


# Function that runs the `on::exit` commands.  This is set as the EXIT trap in
# Bash to ensure that it always executes at the end of a script or subshell.
#
# Examples
#
#   # Set up the trap
#   trap on::exitTrap EXIT
#
# Returns nothing.
on::exitTrap() {
    local cmd itemArray length name

    name="ON_EXIT_$BASHPID"

    if ! is::array "$name"; then
        log::debug "No array of on::exit traps [$BASHPID]"

        return
    fi

    itemArray="$name""[@]"

    # See note above about using `eval`.
    eval "length=\${#$itemArray}"

    if [[ "$length" == 0 ]]; then
        log::debug "Empty list of on::exit traps [$BASHPID]"

        return
    fi

    log::debug "Running on::exit trap [$BASHPID]" || return $?

    for cmd in "${!itemArray}"; do
        log::debug "Running on::exit command: $cmd" || return $?
        eval "$cmd"
    done

    log::debug "Done running on::exit traps" || return $?
}
